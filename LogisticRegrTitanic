import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the passenger data
passengers = pd.read_csv("passengers.csv")

# Update sex column to numerical
passengers['Sex'] = passengers['Sex'].apply(lambda x: 1 if x == 'female' else 0)

# Fill the nan values in the age column
passengers.Age.fillna(round(passengers.Age.mean()), inplace=True)

# Create a first class column
passengers['first_class'] = passengers['Pclass'].apply(lambda x: 1 if x == 1 else 0)

# Create a second class column
passengers['second_class'] = passengers['Pclass'].apply(lambda x: 1 if x == 2 else 0)

# Select the desired features
features = passengers[['Sex', 'Age', 'first_class', 'second_class']]
survival = passengers['Survived']


# Perform train, test, split
train_features, test_features, train_labels, test_labels = train_test_split(features, survival, train_size=0.8, test_size=0.2)

# Scale the feature data so it has mean = 0 and standard deviation = 1
scaler = StandardScaler()
train_features = scaler.fit_transform(train_features)
test_features = scaler.transform(test_features)
# Create and train the model
regr = LogisticRegression()
regr.fit(train_features, train_labels)
train_score = regr.score(train_features, train_labels)
test_score = regr.score(test_features, test_labels)
# Printing out scores and coeffs
print("Training set score: {0:.3f}% \nTest set score: {1:.3f}%".format(train_score*100, test_score*100))
coefs = list(zip(['Sex', 'Age', 'First Class', 'Second Class'], regr.coef_[0]))
coefs = sorted(coefs, reverse=True)
for coef in coefs:
  print("{0} coefficient: {1:.2f}".format(coef[0], coef[1]))
  
  
# Score the model on the train data


# Score the model on the test data


# Analyze the coefficients


# Sample passenger features
Jack = np.array([0.0, 20.0, 0.0, 0.0])
Rose = np.array([1.0, 17.0, 1.0, 0.0])
You_2nd = np.array([0.0, 22.0, 0.0, 1.0])
You_1st = np.array([0.0, 22.0, 1.0, 0.0])
Female_2nd = np.array([1.0, 21.0, 0.0, 1.0])
Female_1st = np.array([1.0, 21.0, 1.0, 0.0])

passengers = ["Jack", "Rose", "Luke 2nd Class", "Luke 1st Class", "Female 2nd Class", "Female 1st Class"]
# Combine passenger arrays
sample_passengers = np.array([Jack, Rose, You_2nd, You_1st, Female_2nd, Female_1st])

# Scale the sample passenger features
sample_passengers = scaler.transform(sample_passengers)

# Make survival predictions!
results = regr.predict_proba(sample_passengers)
for i in range(len(results)):
  print("{0}: {1}".format(passengers[i], results[i]))



