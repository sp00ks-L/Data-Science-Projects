def distance(movie1, movie2):
    """

    :param movie1:
    :param movie2:
    :return: sqrt of distance between movie1 and movie2 squared
    """
    squared_difference = 0
    for i in range(len(movie1)):
        squared_difference += (movie1[i] - movie2[i]) ** 2
    final_distance = squared_difference ** 0.5
    return final_distance


def classify(unknown, dataset, labels, k):
    """

    :param unknown: the unknown point to compare to the dataset
    :param dataset: the dataset to compare your point to
    :param labels: labels of the dataset to apply to the unknown point
    :param k: how many neighbours to check for
    :return: if number of 'good' neighbours is > 'bad' neighbours then return 1: else 0
    """
    distances = []
    # Looping through all points in the dataset
    for title in dataset:
        movie = dataset[title]
        distance_to_point = distance(movie, unknown)
        # Adding the distance and point associated with that distance
        distances.append([distance_to_point, title])
    distances.sort()
    # Taking only the k closest points
    neighbors = distances[0:k]
    num_good = 0
    num_bad = 0
    for neighbor in neighbors:
        title = neighbor[1]
        if labels[title] == 0:
            num_bad += 1
        elif labels[title] == 1:
            num_good += 1
    if num_good > num_bad:
        return 1
    else:
        return 0


def find_validation_accuracy(training_set, training_labels, validation_set, validation_labels, k):
    """

    :param training_set: data set to train model
    :param training_labels: labels associated with training set
    :param validation_set: data set to validate accuracy of model
    :param validation_labels: labels associated with validation set
    :param k: number of nearest neighbours
    :return: validation error of model - how many predictions it got right 
    """
    num_correct = 0.0
    for title in validation_set:
        guess = classify(validation_set[title], training_set, training_labels, k)
        if guess == validation_labels[title]:
            num_correct += 1
        else:
            pass

    validation_error = num_correct / len(validation_set)
    return validation_error
    
    
    
    
 # -------------- sk-learn --------------
 from sklearn.neighbors import KNeighborsClassifer
 
 classifier = KNeighborsClassifer(n_neighbors = k) # Where k is an integer e.g. 5
 # Important to consider how k can affect validation error
 classifier.fit(dataset, labels)
 
 results = classifer.predict(unknown)
 
 
 
 
 
 # -------------- K-Nearest Neighbour Regressor --------------
 
 # As part of the classify function. Allows for weighted regression to be calculated
 # This is based on how close a neighbour is to your unknown point
   for neighbor in neighbors:
    title = neighbor[1]
    rating = movie_ratings[title]
    neighbor_distance = neighbor[0]
    numerator += (rating / neighbor_distance)
    denominator += (1 / neighbor_distance)
  return (numerator / denominator)
  
  
 
 
